services:
  backend:
    build: ./backend
    volumes:
      - ./backend/src:/app/src
    env_file:
      - .env
    healthcheck:
      test: 'curl --fail --request POST --header ''content-type: application/json'' --url ''http://localhost:4002'' --data ''{"query":"query { __typename }"}'' || exit 1'
      interval: 1s
      timeout: 2s
      retries: 100
    depends_on:
      db:
        condition: service_healthy
  frontend:
    build: ./frontend
    volumes:
      - ./frontend/src:/app/src
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --request GET --url 'http://localhost:3000' || exit 1"
      interval: 1s
      timeout: 2s
      retries: 100
  db:
    image: postgres:16.4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 1s
      timeout: 2s
      retries: 100
    environment:
      POSTGRES_PASSWORD: example
  adminer:
    image: adminer
  apigateway:
    image: nginx
    volumes:
      - ./api_gateway/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    ports:
      - 7002:80
# services:
#   backend:
#     build: ./backend
#     volumes:
#       - ./backend/src:/app/src
#     env_file:
#       - .env
#     healthcheck:
#       test: 'curl --fail --request POST --header "content-type: application/json" --url "http://localhost:4002/graphql" --data "{\"query\":\"query { __typename }\"}" || exit 1'
#       interval: 30s
#       timeout: 10s
#       retries: 5
#     depends_on:
#       db:
#         condition: service_healthy

#   db:
#     image: postgres
#     environment:
#       POSTGRES_DB: postgres
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: example1
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#     volumes:
#       - pgdata:/var/lib/postgresql/data

#   frontend:
#     build: ./frontend
#     volumes:
#       - ./frontend/src:/app/src
#     depends_on:
#       backend:
#         condition: service_healthy
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:3000"]
#       interval: 30s
#       timeout: 10s
#       retries: 5
#     ports:
#       - "3000:3000"

#   adminer:
#     image: adminer
#     ports:
#       - "8080:8080"

#   apigateway:
#     image: nginx
#     volumes:
#       - ./api_gateway/nginx.conf:/etc/nginx/nginx.conf
#     depends_on:
#       backend:
#         condition: service_healthy
#       frontend:
#         condition: service_healthy
#     ports:
#       - "7002:80"

# volumes:
#   pgdata:
